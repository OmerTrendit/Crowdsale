pragma solidity ^0.4.18;

import '../token/MintableToken.sol';
import '../math/SafeMath.sol';

/**
 * @title Crowdsale
 * @dev Crowdsale is a base contract for managing a token crowdsale.
 * Crowdsales have a start and end timestamps, where investors can make
 * token purchases and the crowdsale will assign them tokens based
 * on a token per ETH rate. Funds collected are forwarded to a wallet
 * as they arrive.
 */
contract Crowdsale {
  using SafeMath for uint256;

  // The token being sold
  MintableToken public token;

  // start and end timestamps where investments are allowed (both inclusive)
  uint256 public startTime;
  uint256 public endTime;

  // address where funds are collected
  address public wallet;

  // how many token units a buyer gets per wei
  uint256 public rate;

  // amount of raised money in wei
  uint256 public weiRaised;

  uint256 ETH_to_Wei = 1000000000000000000;

  /**
   * event for token purchase logging
   * @param purchaser who paid for the tokens
   * @param beneficiary who got the tokens
   * @param value weis paid for purchase 
   * @param amount amount of tokens purchased
   */
  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);


  function Crowdsale() public {

    token = createTokenContract();

    //Mint Phase 2 sale tokens (115 Million Tokens)
    token.mint(0xcb387e810A4e0da0325d67975E1e80a0F616fC77, (ETH_to_Wei*115000000));

    //Mint User Acquisition funds (40 Million Tokens)
    token.mint(0xf93edb7CFfC4208917B35f8D2CA62766c6fBc832, (ETH_to_Wei*40000000)); 
 
    //Mint Platform Reserve (35 Million Tokens)
    token.mint(0xD86c89c94Da4D14d15918fB2f827aA507941400a, (ETH_to_Wei*35000000)); 

    //Mint tokens for Airdrop/Bounty/Marketing programs (5 Million Tokens)
    token.mint(0x180bf818886a3Ad3A16c9014102CD71931Fe2a4F, (ETH_to_Wei*5000000)); 

    startTime = now + 86400;
    endTime = startTime + (86400*7) + 1500;
    rate = 12500;
    wallet = 0x34389a2C4c1B72665d12CCC0102C91CbBe819f46;
  }

  // creates the token to be sold.
  // override this method to have crowdsale of a specific mintable token.
  function createTokenContract() internal returns (MintableToken) {
    return new MintableToken();
  }


  // fallback function can be used to buy tokens
  function () external payable {
    buyTokens(msg.sender);
  }

  // low level token purchase function
  function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    require(validPurchase());

    uint256 weiAmount = msg.value;

    // calculate token amount to be created
    uint256 tokens = weiAmount.mul(rate);

    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);
    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    forwardFunds();
  }

  // send ether to the fund collection wallet
  // override to create custom fund forwarding mechanisms
  function forwardFunds() internal {
    wallet.transfer(msg.value);
  }

  // @return true if the transaction can buy tokens
  function validPurchase() internal view returns (bool) {
    bool withinPeriod = now >= startTime && now <= endTime;
    bool nonZeroPurchase = msg.value != 0;   
    bool belowMaximum = msg.value <= (50*ETH_to_Wei);   
    bool aboveMinimum = msg.value >= ((1)*(ETH_to_Wei/100));
    return withinPeriod && nonZeroPurchase && belowMaximum && aboveMinimum;
  }

  // @return true if crowdsale event has ended
  function hasEnded() public view returns (bool) {
    return now > endTime;
  }


}
